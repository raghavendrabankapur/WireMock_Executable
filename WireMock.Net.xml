<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WireMock.Net</name>
    </assembly>
    <members>
        <member name="T:WireMock.Admin.Mappings.BodyModel">
            <summary>
            Body Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.Matcher">
            <summary>
            Gets or sets the matcher.
            </summary>
            <value>
            The matcher.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.Func">
            <summary>
            Gets or sets the function.
            </summary>
            <value>
            The function.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.BodyModel.DataFunc">
            <summary>
            Gets or sets the data function.
            </summary>
            <value>
            The data function.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.ClientIPModel">
            <summary>
            ClientIPModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ClientIPModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.ClientIPModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.CookieModel">
            <summary>
            Cookie Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.CookieModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.EncodingModel">
            <summary>
            EncodingModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.CodePage">
            <summary>
            Encoding CodePage
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.EncodingName">
            <summary>
            Encoding EncodingName
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.EncodingModel.WebName">
            <summary>
            Encoding WebName
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.HeaderModel">
            <summary>
            Header Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.HeaderModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.MappingModel">
            <summary>
            MappingModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Title">
            <summary>
            Gets or sets the unique title.
            </summary>
            <value>
            The unique title.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Scenario">
            <summary>
            Scenario.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.WhenStateIs">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.SetStateTo">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MappingModel.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.MatcherModel">
            <summary>
            MatcherModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>
            The pattern.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.Patterns">
            <summary>
            Gets or sets the patterns.
            </summary>
            <value>
            The patterns.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.MatcherModel.IgnoreCase">
            <summary>
            Gets or sets the ignore case.
            </summary>
            <value>
            The ignore case.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.ParamModel">
            <summary>
            Param Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.Values">
            <summary>
            Gets or sets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.ParamModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.PathModel">
            <summary>
            PathModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.PathModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.PathModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.RequestModel">
            <summary>
            RequestModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.ClientIP">
            <summary>
            Gets or sets the ClientIP. (Can be a string or a ClientIPModel)
            </summary>
            <value>
            The ClientIP.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Path">
            <summary>
            Gets or sets the Path. (Can be a string or a PathModel)
            </summary>
            <value>
            The Path.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Url">
            <summary>
            Gets or sets the Url. (Can be a string or a UrlModel)
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Headers">
            <summary>
            Gets or sets the Headers.
            </summary>
            <value>
            The Headers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Cookies">
            <summary>
            Gets or sets the Cookies.
            </summary>
            <value>
            The Cookies.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Params">
            <summary>
            Gets or sets the Params.
            </summary>
            <value>
            The Headers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.RequestModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="T:WireMock.Admin.Mappings.ResponseModel">
            <summary>
            ResponseModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.StatusCode">
            <summary>
            Gets or sets the HTTP status.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyDestination">
            <summary>
            Gets or sets the body destination (SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyFromBase64">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsJson">
            <summary>
            Gets or sets the body (as JSON object).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsBytes">
            <summary>
            Gets or sets the body (as bytearray).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsFile">
            <summary>
            Gets or sets the body as a file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.BodyEncoding">
            <summary>
            Gets or sets the body encoding.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.UseTransformer">
            <summary>
            Gets or sets a value indicating whether [use transformer].
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.HeadersRaw">
            <summary>
            Gets or sets the Headers (Raw).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.Delay">
            <summary>
            Gets or sets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.ProxyUrl">
            <summary>
            Gets or sets the Proxy URL.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.ResponseModel.X509Certificate2ThumbprintOrSubjectName">
            <summary>
            The client X509Certificate2 Thumbprint or SubjectName to use.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Mappings.UrlModel">
            <summary>
            UrlModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Mappings.UrlModel.Matchers">
            <summary>
            Gets or sets the matchers.
            </summary>
            <value>
            The matchers.
            </value>
        </member>
        <member name="P:WireMock.Admin.Mappings.UrlModel.Funcs">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="T:WireMock.Admin.Requests.LogEntryModel">
            <summary>
            Request Log Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Request">
            <summary>
            Gets or sets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.MappingGuid">
            <summary>
            Gets or sets the mapping unique identifier.
            </summary>
            <value>
            The mapping unique identifier.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.MappingTitle">
            <summary>
            Gets or sets the mapping unique title.
            </summary>
            <value>
            The mapping unique title.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogEntryModel.RequestMatchResult">
            <summary>
            Gets or sets the request match result.
            </summary>
            <value>
            The request match result.
            </value>
        </member>
        <member name="T:WireMock.Admin.Requests.LogRequestMatchModel">
            <summary>
            LogRequestMatchModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.TotalScore">
            <summary>
            Gets or sets the match-score.
            </summary>
            <value>
            The match-score.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.TotalNumber">
            <summary>
            Gets or sets the total number of matches.
            </summary>
            <value>
            The total number of matches.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.IsPerfectMatch">
            <summary>
            Gets or sets a value indicating whether this instance is perfect match.
            </summary>
            <value>
            <c>true</c> if this instance is perfect match; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.AverageTotalScore">
            <summary>
            Gets the match percentage.
            </summary>
            <value>
            The match percentage.
            </value>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestMatchModel.MatchDetails">
            <summary>
            Gets the match details.
            </summary>
            <value>
            The match details.
            </value>
        </member>
        <member name="T:WireMock.Admin.Requests.LogRequestModel">
            <summary>
            RequestMessage Model
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.ClientIP">
            <summary>
            Gets the Client IP Address.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.DateTime">
            <summary>
            Gets the DateTime.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Path">
            <summary>
            Gets or sets the Path.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.AbsoluteUrl">
            <summary>
            Gets or sets the absolete URL.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Headers">
            <summary>
            Gets or sets the Headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Cookies">
            <summary>
            Gets or sets the Cookies.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogRequestModel.BodyEncoding">
            <summary>
            Gets or sets the body encoding.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Requests.LogResponseModel">
            <summary>
            Response MessageModel
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyDestination">
            <summary>
            Gets or sets the body destination (SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.Body">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsBytes">
            <summary>
            Gets or sets the body as bytes.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsFile">
            <summary>
            Gets or sets the body as file.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyOriginal">
            <summary>
            Gets or sets the original body.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Requests.LogResponseModel.BodyEncoding">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="T:WireMock.Admin.Settings.SettingsModel">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.GlobalProcessingDelay">
            <summary>
            Gets or sets the global delay in milliseconds.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.AllowPartialMapping">
            <summary>
            Gets or sets if partial mapping is allowed.
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.RequestLogExpirationDuration">
            <summary>
            Gets or sets the RequestLog expiration in hours
            </summary>
        </member>
        <member name="P:WireMock.Admin.Settings.SettingsModel.MaxRequestLogCount">
            <summary>
            Gets or sets the MaxRequestLog count.
            </summary>
        </member>
        <member name="T:WireMock.Client.IFluentMockServerAdmin">
            <summary>
            The RestEase interface which defines all admin commands.
            </summary>
        </member>
        <member name="P:WireMock.Client.IFluentMockServerAdmin.Authorization">
            <summary>
            Authentication header
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetSettingsAsync">
            <summary>
            Get the settings.
            </summary>
            <returns>SettingsModel</returns>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.PutSettingsAsync(WireMock.Admin.Settings.SettingsModel)">
            <summary>
            Update the settings.
            </summary>
            <param name="settings">SettingsModel</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.PostSettingsAsync(WireMock.Admin.Settings.SettingsModel)">
            <summary>
            Update the settings
            </summary>
            <param name="settings">SettingsModel</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetMappingsAsync">
            <summary>
            Get the mappings.
            </summary>
            <returns>MappingModels</returns>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.PostMappingAsync(WireMock.Admin.Mappings.MappingModel)">
            <summary>
            Add a new mapping.
            </summary>
            <param name="mapping">MappingModel</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.DeleteMappingsAsync">
            <summary>
            Delete all mappings.
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.ResetMappingsAsync">
            <summary>
            Delete (reset) all mappings.
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetMappingAsync(System.Guid)">
            <summary>
            Get a mapping based on the guid
            </summary>
            <param name="guid">The Guid</param>
            <returns>MappingModel</returns>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.PutMappingAsync(System.Guid,WireMock.Admin.Mappings.MappingModel)">
            <summary>
            Update a mapping based on the guid
            </summary>
            <param name="guid">The Guid</param>
            <param name="mapping">MappingModel</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.DeleteMappingAsync(System.Guid)">
            <summary>
            Delete a mapping based on the guid
            </summary>
            <param name="guid">The Guid</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.SaveMappingAsync">
            <summary>
            Save the mappings
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetRequestsAsync">
            <summary>
            Get the requests.
            </summary>
            <returns>LogRequestModels</returns>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.DeleteRequestsAsync">
            <summary>
            Delete all requests.
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.ResetRequestsAsync">
            <summary>
            Delete (reset) all requests.
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetRequestAsync(System.Guid)">
            <summary>
            Get a request based on the guid
            </summary>
            <param name="guid">The Guid</param>
            <returns>MappingModel</returns>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.DeleteRequestAsync(System.Guid)">
            <summary>
            Delete a request based on the guid
            </summary>
            <param name="guid">The Guid</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.FindRequestsAsync(WireMock.Admin.Mappings.RequestModel)">
            <summary>
            Find a request based on the criteria
            </summary>
            <param name="model">The RequestModel</param>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.GetScenariosAsync">
            <summary>
            Get all scenarios
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.DeleteScenariosAsync">
            <summary>
            Delete (reset) all scenarios
            </summary>
        </member>
        <member name="M:WireMock.Client.IFluentMockServerAdmin.ResetScenariosAsync">
            <summary>
            Delete (reset) all scenarios
            </summary>
        </member>
        <member name="T:WireMock.Http.HttpKnownHeaderNames">
            <summary>
            Copied from https://raw.githubusercontent.com/dotnet/corefx/master/src/Common/src/System/Net/HttpKnownHeaderNames.cs
            </summary>
        </member>
        <member name="T:WireMock.Http.PortUtil">
            <summary>
            Utility class
            </summary>
        </member>
        <member name="M:WireMock.Http.PortUtil.FindFreeTcpPort">
            <summary>
            The find free TCP port.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
            <remarks>see http://stackoverflow.com/questions/138043/find-the-next-tcp-port-in-net.</remarks>
        </member>
        <member name="M:WireMock.Http.PortUtil.TryExtractProtocolAndPort(System.String,System.String@,System.Int32@)">
            <summary>
            Extract a proto and port from a URL.
            </summary>
        </member>
        <member name="T:WireMock.IResponseProvider">
            <summary>
            The Response Provider interface.
            </summary>
        </member>
        <member name="M:WireMock.IResponseProvider.ProvideResponseAsync(WireMock.RequestMessage)">
            <summary>
            The provide response.
            </summary>
            <param name="requestMessage">The request.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/>.</returns>
        </member>
        <member name="T:WireMock.Logging.LogEntry">
            <summary>
            LogEntry
            </summary>
        </member>
        <member name="P:WireMock.Logging.LogEntry.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMessage">
            <summary>
            Gets or sets the request message.
            </summary>
            <value>
            The request message.
            </value>
        </member>
        <member name="P:WireMock.Logging.LogEntry.ResponseMessage">
            <summary>
            Gets or sets the response message.
            </summary>
            <value>
            The response message.
            </value>
        </member>
        <member name="P:WireMock.Logging.LogEntry.RequestMatchResult">
            <summary>
            Gets or sets the request match result.
            </summary>
            <value>
            The request match result.
            </value>
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingGuid">
            <summary>
            Gets or sets the mapping unique identifier.
            </summary>
            <value>
            The mapping unique identifier.
            </value>
        </member>
        <member name="P:WireMock.Logging.LogEntry.MappingTitle">
            <summary>
            Gets or sets the mapping unique title.
            </summary>
            <value>
            The mapping unique title.
            </value>
        </member>
        <member name="T:WireMock.Mapping">
            <summary>
            The Mapping.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Guid">
            <summary>
            Gets the unique identifier.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Title">
            <summary>
            Gets the unique title.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Priority">
            <summary>
            Gets the priority.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Scenario">
            <summary>
            Scenario.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.ExecutionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.NextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.RequestMatcher">
            <summary>
            The Request matcher.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.Provider">
            <summary>
            The Provider.
            </summary>
        </member>
        <member name="P:WireMock.Mapping.IsStartState">
            <summary>
            Is State started ?
            </summary>
        </member>
        <member name="M:WireMock.Mapping.#ctor(System.Guid,System.String,WireMock.Matchers.Request.IRequestMatcher,WireMock.IResponseProvider,System.Int32,System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Mapping"/> class.
            </summary>
            <param name="guid">The unique identifier.</param>
            <param name="title">The unique title (can be null_.</param>
            <param name="requestMatcher">The request matcher.</param>
            <param name="provider">The provider.</param>
            <param name="priority">The priority for this mapping.</param>
            <param name="scenario">The scenario. [Optional]</param>
            <param name="executionConditionState">State in which the current mapping can occur. [Optional]</param>
            <param name="nextState">The next state which will occur after the current mapping execution. [Optional]</param>
        </member>
        <member name="M:WireMock.Mapping.ResponseToAsync(WireMock.RequestMessage)">
            <summary>
            The response to.
            </summary>
            <param name="requestMessage">The request message.</param>
            <returns>The <see cref="T:WireMock.ResponseMessage"/>.</returns>
        </member>
        <member name="M:WireMock.Mapping.GetRequestMatchResult(WireMock.RequestMessage,System.Object)">
            <summary>
            Gets the RequestMatchResult based on the RequestMessage.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="nextState">The Next State.</param>
            <returns>The <see cref="T:WireMock.Matchers.Request.RequestMatchResult"/>.</returns>
        </member>
        <member name="P:WireMock.Mapping.IsAdminInterface">
            <summary>
            Gets a value indicating whether this mapping is an Admin Interface.
            </summary>
            <value>
            <c>true</c> if this mapping is an Admin Interface; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WireMock.RegistrationCallback">
            <summary>
            The registration callback.
            </summary>
            <param name="mapping">The mapping.</param>
        </member>
        <member name="T:WireMock.Matchers.ExactMatcher">
            <summary>
            ExactMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.ExactMatcher"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.GetPatterns">
            <summary>
            Gets the value.
            </summary>
            <returns>Patterns</returns>
        </member>
        <member name="M:WireMock.Matchers.ExactMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:WireMock.Matchers.IMatcher">
            <summary>
            IMatcher
            </summary>
        </member>
        <member name="M:WireMock.Matchers.IMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input.</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.IMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Patterns</returns>
        </member>
        <member name="M:WireMock.Matchers.IMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:WireMock.Matchers.JsonPathMatcher">
            <summary>
            JSONPathMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.JsonPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input string</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Pattern</returns>
        </member>
        <member name="M:WireMock.Matchers.JsonPathMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:WireMock.Matchers.MatchScores">
            <summary>
            MatchScores
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Tolerance">
            <summary>
            The tolerance
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Mismatch">
            <summary>
            The default mismatch score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.Perfect">
            <summary>
            The default perfect match score
            </summary>
        </member>
        <member name="F:WireMock.Matchers.MatchScores.AlmostPerfect">
            <summary>
            The almost perfect match score
            </summary>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Boolean)">
            <summary>
            Convert a bool to the score.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Calculates the score from multiple funcs.
            </summary>
            <param name="values">The values.</param>
            <returns>average score</returns>
        </member>
        <member name="M:WireMock.Matchers.MatchScores.ToScore(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the score from multiple funcs.
            </summary>
            <param name="values">The values.</param>
            <returns>average score</returns>
        </member>
        <member name="T:WireMock.Matchers.RegexMatcher">
            <summary>
            Regular Expression Matcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.RegexMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input string</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Pattern</returns>
        </member>
        <member name="M:WireMock.Matchers.RegexMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>
            Name
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.CompositeMatcherType">
            <summary>
            CompositeMatcherType
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.CompositeMatcherType.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:WireMock.Matchers.Request.IRequestMatcher">
            <summary>
            The RequestMatcher interface.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMatchResult">
            <summary>
            RequestMatchResult
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalScore">
            <summary>
            Gets or sets the match-score.
            </summary>
            <value>
            The match-score.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.TotalNumber">
            <summary>
            Gets or sets the total number of matches.
            </summary>
            <value>
            The total number of matches.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.IsPerfectMatch">
            <summary>
            Gets or sets a value indicating whether this instance is perfect match.
            </summary>
            <value>
            <c>true</c> if this instance is perfect match; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.AverageTotalScore">
            <summary>
            Gets the match percentage.
            </summary>
            <value>
            The match percentage.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMatchResult.MatchDetails">
            <summary>
            Gets the match details.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMatchResult"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.AddScore(System.Type,System.Double)">
            <summary>
            Adds the score.
            </summary>
            <param name="matcherType">The matcher Type.</param>
            <param name="score">The score.</param>
            <returns>The score.</returns>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMatchResult.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageBodyMatcher">
            <summary>
            The request body matcher.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageBodyMatcher._bodyData">
            <summary>
            The body as byte[].
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Func">
            <summary>
            The body function
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.DataFunc">
            <summary>
            The body data function
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageBodyMatcher.Matcher">
            <summary>
            The matcher.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="body">
            The body Regex pattern.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="body">
            The body Regex pattern.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">
            The body func.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(System.Func{System.Byte[],System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="func">
            The body func.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.#ctor(WireMock.Matchers.IMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageBodyMatcher"/> class.
            </summary>
            <param name="matcher">
            The body matcher.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageBodyMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher">
            <summary>
            The request ClientIP matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageClientIPMatcher.Funcs">
            <summary>
            The ClientIP functions.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="clientIPs">The clientIPs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageClientIPMatcher"/> class.
            </summary>
            <param name="funcs">The clientIP functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageClientIPMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher">
            <summary>
            The composite request matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCompositeMatcher.RequestMatchers">
            <summary>
            Gets the request matchers.
            </summary>
            <value>
            The request matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.#ctor(System.Collections.Generic.IEnumerable{WireMock.Matchers.Request.IRequestMatcher},WireMock.Matchers.Request.CompositeMatcherType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCompositeMatcher"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
            <param name="type">The CompositeMatcherType type (Defaults to 'And')</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCompositeMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageCookieMatcher">
            <summary>
            The request cookie matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Funcs">
            <value>
            The funcs.
            </value>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageCookieMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">The ignoreCase.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageCookieMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageCookieMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher">
            <summary>
            The request header matcher.
            </summary>
            <inheritdoc cref="T:WireMock.Matchers.Request.IRequestMatcher"/>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Funcs">
            <summary>
            The functions
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageHeaderMatcher.Matchers">
            <value>
            The matchers.
            </value>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageHeaderMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageHeaderMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageMethodMatcher">
            <summary>
            The request verb matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageMethodMatcher.Methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageMethodMatcher"/> class.
            </summary>
            <param name="methods">
            The verb.
            </param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageMethodMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <summary>
            Determines whether the specified RequestMessage is match.
            </summary>
            <param name="requestMessage">The RequestMessage.</param>
            <param name="requestMatchResult">The RequestMatchResult.</param>
            <returns>
            A value between 0.0 - 1.0 of the similarity.
            </returns>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageParamMatcher">
            <summary>
            The request parameters matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Funcs">
            <summary>
            The funcs
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageParamMatcher.Values">
            <summary>
            The values
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageParamMatcher"/> class.
            </summary>
            <param name="funcs">The funcs.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageParamMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessagePathMatcher">
            <summary>
            The request path matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Matchers">
            <summary>
            The matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessagePathMatcher.Funcs">
            <summary>
            The path functions
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="paths">The paths.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessagePathMatcher"/> class.
            </summary>
            <param name="funcs">The path functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessagePathMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher">
            <summary>
            The scenario and state matcher.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._executionConditionState">
            <summary>
            Execution state condition for the current mapping.
            </summary>
        </member>
        <member name="F:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher._nextState">
            <summary>
            The next state which will be signaled after the current mapping execution.
            In case the value is null state will not be changed.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher"/> class.
            </summary>
            <param name="nextState">The next state.</param>
            <param name="executionConditionState">Execution state condition for the current mapping.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageScenarioAndStateMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc />
        </member>
        <member name="T:WireMock.Matchers.Request.RequestMessageUrlMatcher">
            <summary>
            The request url matcher.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Matchers">
            <summary>
            The matchers.
            </summary>
        </member>
        <member name="P:WireMock.Matchers.Request.RequestMessageUrlMatcher.Funcs">
            <summary>
            The url functions.
            </summary>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="urls">The urls.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(WireMock.Matchers.IMatcher[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="matchers">The matchers.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.#ctor(System.Func{System.String,System.Boolean}[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.Request.RequestMessageUrlMatcher"/> class.
            </summary>
            <param name="funcs">The url functions.</param>
        </member>
        <member name="M:WireMock.Matchers.Request.RequestMessageUrlMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)">
            <inheritdoc cref="M:WireMock.Matchers.Request.IRequestMatcher.GetMatchingScore(WireMock.RequestMessage,WireMock.Matchers.Request.RequestMatchResult)"/>
        </member>
        <member name="T:WireMock.Matchers.SimMetricsMatcher">
            <summary>
            SimMetricsMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(System.String,SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.#ctor(System.String[],SimMetrics.Net.SimMetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.SimMetricsMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="simMetricType">The SimMetric Type</param>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input string</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.GetPatterns">
            <summary>
            Gets the pattern.
            </summary>
            <returns>Pattern</returns>
        </member>
        <member name="M:WireMock.Matchers.SimMetricsMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:WireMock.Matchers.WildcardMatcher">
            <summary>
            WildcardMatcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.#ctor(System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.WildcardMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">IgnoreCase</param>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.GetPatterns">
            <summary>
            Gets the pattern.
            </summary>
            <returns>Pattern</returns>
        </member>
        <member name="M:WireMock.Matchers.WildcardMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>
            Name
            </returns>
        </member>
        <member name="T:WireMock.Matchers.XPathMatcher">
            <summary>
            XPath2Matcher
            </summary>
            <seealso cref="T:WireMock.Matchers.IMatcher" />
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Matchers.XPathMatcher"/> class.
            </summary>
            <param name="patterns">The patterns.</param>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.IsMatch(System.String)">
            <summary>
            Determines whether the specified input is match.
            </summary>
            <param name="input">The input string</param>
            <returns>A value between 0.0 - 1.0 of the similarity.</returns>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.GetPatterns">
            <summary>
            Gets the patterns.
            </summary>
            <returns>Patterns</returns>
        </member>
        <member name="M:WireMock.Matchers.XPathMatcher.GetName">
            <summary>
            Gets the name.
            </summary>
            <returns>Name</returns>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.IsStarted">
            <summary>
            Gets a value indicating whether this server is started.
            </summary>
            <value>
            <c>true</c> if this server is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Urls">
            <summary>
            Gets the urls.
            </summary>
            <value>
            The urls.
            </value>
        </member>
        <member name="P:WireMock.Owin.IOwinSelfHost.Ports">
            <summary>
            Gets the ports.
            </summary>
            <value>
            The ports.
            </value>
        </member>
        <member name="T:WireMock.Owin.OwinRequestMapper">
            <summary>
            OwinRequestMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.OwinRequestMapper.MapAsync(Microsoft.Owin.IOwinRequest)">
            <summary>
            MapAsync IOwinRequest to RequestMessage
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:WireMock.Owin.OwinResponseMapper">
            <summary>
            OwinResponseMapper
            </summary>
        </member>
        <member name="M:WireMock.Owin.OwinResponseMapper.MapAsync(WireMock.ResponseMessage,Microsoft.Owin.IOwinResponse)">
            <summary>
            MapAsync ResponseMessage to OwinResponse
            </summary>
            <param name="responseMessage"></param>
            <param name="response"></param>
        </member>
        <member name="T:WireMock.RequestBuilders.IBodyRequestBuilder">
            <summary>
            The BodyRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(WireMock.Matchers.IMatcher)">
            <summary>
            The with body.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.String)">
            <summary>
            The with body.
            </summary>
            <param name="body">The body.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Byte[])">
            <summary>
            The with body byte[].
            </summary>
            <param name="body">The body as byte[].</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.String,System.Boolean})">
            <summary>
            The with body string func.
            </summary>
            <param name="body">The body string function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IBodyRequestBuilder.WithBody(System.Func{System.Byte[],System.Boolean})">
            <summary>
            The with body byte[] func.
            </summary>
            <param name="body">The body byte[] function.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IClientIPRequestBuilder">
            <summary>
            The IClientIPRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(WireMock.Matchers.IMatcher[])">
            <summary>
            The with ClientIP.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.String[])">
            <summary>
            The with ClientIP.
            </summary>
            <param name="clientIPs">The clientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IClientIPRequestBuilder.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with ClientIP.
            </summary>
            <param name="funcs">The path funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder">
            <summary>
            The HeadersAndCookieRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.String,System.String,System.Boolean)">
            <summary>
            Add Header matching based on name, pattern and ignoreCase.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">ignore Case</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.String,System.String[],System.Boolean)">
            <summary>
            Add Header matching based on name, patterns and ignoreCase.
            </summary>
            <param name="name">The name.</param>
            <param name="patterns">The patterns.</param>
            <param name="ignoreCase">ignore Case</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            The with header.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            The with header.
            </summary>
            <param name="funcs">The headers funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithCookie(System.String,System.String,System.Boolean)">
            <summary>
            The with cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">ignore Case</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithCookie(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            The with cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            The with cookie.
            </summary>
            <param name="cookieFuncs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IMethodRequestBuilder">
            <summary>
            The MethodRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingDelete">
            <summary>
            The using delete.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingGet">
            <summary>
            The using get.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingHead">
            <summary>
            The using head.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPost">
            <summary>
            The using post.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPatch">
            <summary>
            The using patch.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPut">
            <summary>
            The using put.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyVerb">
            <summary>
            The using any verb.
            </summary>
            <returns>
            The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.
            </returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingVerb(System.String[])">
            <summary>
            The using verb.
            </summary>
            <param name="verbs">The verb.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IParamsRequestBuilder">
            <summary>
            The ParametersRequestBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.String,System.String[])">
            <summary>
            The with parameters.
            </summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IParamsRequestBuilder.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            The with parameters.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.IRequestBuilder">
            <summary>
            IRequestBuilder
            </summary>
        </member>
        <member name="T:WireMock.RequestBuilders.IUrlAndPathRequestBuilder">
            <summary>
            IUrlAndPathRequestBuilder
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(WireMock.Matchers.IMatcher[])">
            <summary>
            The with path.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.String[])">
            <summary>
            The with path.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithPath(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with path.
            </summary>
            <param name="funcs">The path funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(WireMock.Matchers.IMatcher[])">
            <summary>
            The with url.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.String[])">
            <summary>
            The with url.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.IUrlAndPathRequestBuilder.WithUrl(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with path.
            </summary>
            <param name="func">The path func.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestBuilders.Request">
            <summary>
            The requests.
            </summary>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.#ctor(System.Collections.Generic.IList{WireMock.Matchers.Request.IRequestMatcher})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.RequestBuilders.Request"/> class.
            </summary>
            <param name="requestMatchers">The request matchers.</param>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatchers``1">
            <summary>
            Gets the request message matchers.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A List{T}</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.GetRequestMessageMatcher``1">
            <summary>
            Gets the request message matcher.
            </summary>
            <typeparam name="T">Type of IRequestMatcher</typeparam>
            <returns>A RequestMatcher</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(WireMock.Matchers.IMatcher[])">
            <summary>
            The with clientIP.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.String[])">
            <summary>
            The with clientIP.
            </summary>
            <param name="clientIPs">The ClientIPs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithClientIP(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with clientIP.
            </summary>
            <param name="funcs">The clientIP funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(WireMock.Matchers.IMatcher[])">
            <summary>
            The with path.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.String[])">
            <summary>
            The with path.
            </summary>
            <param name="paths">The paths.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithPath(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with path.
            </summary>
            <param name="funcs">The path func.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(WireMock.Matchers.IMatcher[])">
            <summary>
            The with url.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.String[])">
            <summary>
            The with url.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithUrl(System.Func{System.String,System.Boolean}[])">
            <summary>
            The with url.
            </summary>
            <param name="funcs">The url func.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingDelete">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingDelete"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingGet">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingGet"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingHead">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingHead"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPost">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPost"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPatch">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPatch"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingPut">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingPut"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingAnyVerb">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingAnyVerb"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.UsingVerb(System.String[])">
            <inheritdoc cref="M:WireMock.RequestBuilders.IMethodRequestBuilder.UsingVerb(System.String[])"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.String)">
            <summary>
            The with body.
            </summary>
            <param name="body">
            The body.
            </param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Byte[])">
            <summary>
            The with body byte[].
            </summary>
            <param name="body">
            The body as byte[].
            </param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.String,System.Boolean})">
            <summary>
            The with body.
            </summary>
            <param name="func">
            The body function.
            </param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(System.Func{System.Byte[],System.Boolean})">
            <summary>
            The with body.
            </summary>
            <param name="func">
            The body function.
            </param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithBody(WireMock.Matchers.IMatcher)">
            <summary>
            The with body.
            </summary>
            <param name="matcher">The matcher.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder" />.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.String,System.String[])">
            <summary>
            The with parameters.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="values">
            The values.
            </param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithParam(System.Func{System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}},System.Boolean}[])">
            <summary>
            The with parameters.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,System.String[],System.Boolean)">
            <inheritdoc cref="M:WireMock.RequestBuilders.IHeadersAndCookiesRequestBuilder.WithHeader(System.String,System.String[],System.Boolean)"/>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            With header.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithHeader(System.Func{System.Collections.Generic.IDictionary{System.String,System.String[]},System.Boolean}[])">
            <summary>
            With header.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,System.String,System.Boolean)">
            <summary>
            With cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.String,WireMock.Matchers.IMatcher[])">
            <summary>
            With cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.RequestBuilders.Request.WithCookie(System.Func{System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean}[])">
            <summary>
            With header.
            </summary>
            <param name="funcs">The funcs.</param>
            <returns>The <see cref="T:WireMock.RequestBuilders.IRequestBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.RequestMessage">
            <summary>
            The request.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.ClientIP">
            <summary>
            Gets the Client IP Address.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Url">
            <summary>
            Gets the url.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.DateTime">
            <summary>
            Gets the DateTime.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Path">
            <summary>
            Gets the path.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Method">
            <summary>
            Gets the method.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Cookies">
            <summary>
            Gets the cookies.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Query">
            <summary>
            Gets the query.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.RawQuery">
            <summary>
            Gets the raw query.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.BodyAsBytes">
            <summary>
            Gets the bodyAsBytes.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Body">
            <summary>
            Gets the body.
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Host">
            <summary>
            Gets the Host
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Protocol">
            <summary>
            Gets the protocol
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Port">
            <summary>
            Gets the port
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.Origin">
            <summary>
            Gets the origin
            </summary>
        </member>
        <member name="P:WireMock.RequestMessage.BodyEncoding">
            <summary>
            Gets the body encoding.
            </summary>
        </member>
        <member name="M:WireMock.RequestMessage.#ctor(System.Uri,System.String,System.String,System.Byte[],System.String,System.Text.Encoding,System.Collections.Generic.IDictionary{System.String,System.String[]},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.RequestMessage"/> class.
            </summary>
            <param name="url">The original url.</param>
            <param name="method">The HTTP method.</param>
            <param name="clientIP">The client IP Address.</param>
            <param name="bodyAsBytes">The bodyAsBytes byte[].</param>
            <param name="body">The body string.</param>
            <param name="bodyEncoding">The body encoding</param>
            <param name="headers">The headers.</param>
            <param name="cookies">The cookies.</param>
        </member>
        <member name="M:WireMock.RequestMessage.GetParameter(System.String)">
            <summary>
            Get a query parameter.
            </summary>
            <param name="key">The key.</param>
            <returns>The query parameter.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.BodyDestinationFormat">
            <summary>
            Defines the BodyDestinationFormat
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.SameAsSource">
            <summary>
            Same as source (no conversion)
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.String">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="F:WireMock.ResponseBuilders.BodyDestinationFormat.Bytes">
            <summary>
            Convert to bytes
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IBodyResponseBuilder">
            <summary>
            The BodyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.String,System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a string.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a ... response based on a bytearray.
            </summary>
            <param name="body">The body.</param>
            <param name="destination">The Body Destination format (SameAsSource, String or Bytes).</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Text.Encoding)">
            <summary>
            WithBody : Create a string response based on a object (which will be converted to a JSON string).
            </summary>
            <param name="body">The body.</param>
            <param name="encoding">The body encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromBase64(System.String,System.Text.Encoding)">
            <summary>
            WithBody : Create a string response based on a Base64 string (which will be decoded to a normal string).
            </summary>
            <param name="bodyAsbase64">The body.</param>
            <param name="encoding">The Encoding.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromFile(System.String,System.Boolean)">
            <summary>
            WithBodyFromFile : Create a ... response based on a File.
            </summary>
            <param name="filename">The filename.</param>
            <param name="cache">Defines if this file is cached in memory or retrieved from disk everytime the response is created.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IDelayResponseBuilder">
            <summary>
            The DelayResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.TimeSpan)">
            <summary>
            The with delay.
            </summary>
            <param name="delay">The TimeSpan to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.Int32)">
            <summary>
            The with delay.
            </summary>
            <param name="milliseconds">The milliseconds to delay.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IHeadersResponseBuilder">
            <summary>
            The HeadersResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeader(System.String,System.String[])">
            <summary>
            The with header.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}})">
            <summary>
            The with headers.
            </summary>
            <param name="headers">The headers.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IProxyResponseBuilder">
            <summary>
            The ProxyResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IProxyResponseBuilder.WithProxy(System.String,System.String)">
            <summary>
            With Proxy URL using X509Certificate2.
            </summary>
            <param name="proxyUrl">The proxy url.</param>
            <param name="clientX509Certificate2ThumbprintOrSubjectName">The X509Certificate2 file to use for client authentication.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.IResponseBuilder">
            <summary>
            The ResponseBuilder interface.
            </summary>
        </member>
        <member name="T:WireMock.ResponseBuilders.IStatusCodeResponseBuilder">
            <summary>
            The StatusCodeResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Int32)">
            <summary>
            The with status code.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            The with status code.
            </summary>
            <param name="code">The code.</param>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.IStatusCodeResponseBuilder.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.ITransformResponseBuilder">
            <summary>
            The TransformResponseBuilder interface.
            </summary>
        </member>
        <member name="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer">
            <summary>
            The with transformer.
            </summary>
            <returns>
            The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.
            </returns>
        </member>
        <member name="T:WireMock.ResponseBuilders.Response">
            <summary>
            The Response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.Delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.UseTransformer">
            <summary>
            Gets a value indicating whether [use transformer].
            </summary>
            <value>
              <c>true</c> if [use transformer]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ProxyUrl">
            <summary>
            The Proxy URL to use.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.X509Certificate2ThumbprintOrSubjectName">
            <summary>
            The client X509Certificate2 Thumbprint or SubjectName to use.
            </summary>
        </member>
        <member name="P:WireMock.ResponseBuilders.Response.ResponseMessage">
            <summary>
            Gets the response message.
            </summary>
            <value>
            The response message.
            </value>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(WireMock.ResponseMessage)">
            <summary>
            Creates this instance.
            </summary>
            <param name="responseMessage">ResponseMessage</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.Create(System.Func{WireMock.ResponseMessage})">
            <summary>
            Creates this instance.
            </summary>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.#ctor(WireMock.ResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.ResponseBuilders.Response"/> class.
            </summary>
            <param name="responseMessage">
            The response.
            </param>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Int32)">
            <summary>
            The with status code.
            </summary>
            <param name="code">The code.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>\
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithStatusCode(System.Net.HttpStatusCode)">
            <summary>
            The with status code.
            </summary>
            <param name="code">The code.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithSuccess">
            <summary>
            The with Success status code (200).
            </summary>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithNotFound">
            <summary>
            The with NotFound status code (404).
            </summary>
            <returns>The <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeader(System.String,System.String[])">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeader(System.String,System.String[])"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.String[]})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}})">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IHeadersResponseBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,WireMock.Util.WireMockList{System.String}})"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.Byte[],System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.Byte[],System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyFromFile(System.String,System.Boolean)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromFile(System.String,System.Boolean)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBody(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBody(System.String,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyAsJson(System.Object,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyAsJson(System.Object,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithBodyFromBase64(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IBodyResponseBuilder.WithBodyFromBase64(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithTransformer">
            <inheritdoc cref="M:WireMock.ResponseBuilders.ITransformResponseBuilder.WithTransformer"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.TimeSpan)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.TimeSpan)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithDelay(System.Int32)">
            <inheritdoc cref="M:WireMock.ResponseBuilders.IDelayResponseBuilder.WithDelay(System.Int32)"/>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.WithProxy(System.String,System.String)">
            <summary>
            With Proxy URL.
            </summary>
            <param name="proxyUrl">The proxy url.</param>
            <param name="clientX509Certificate2ThumbprintOrSubjectName">The X509Certificate2 file to use for client authentication.</param>
            <returns>A <see cref="T:WireMock.ResponseBuilders.IResponseBuilder"/>.</returns>
        </member>
        <member name="M:WireMock.ResponseBuilders.Response.ProvideResponseAsync(WireMock.RequestMessage)">
            <summary>
            The provide response.
            </summary>
            <param name="requestMessage">The request.</param>
            <returns>The <see cref="P:WireMock.ResponseBuilders.Response.ResponseMessage"/>.</returns>
        </member>
        <member name="T:WireMock.ResponseMessage">
            <summary>
            The response.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.Headers">
            <summary>
            Gets the headers.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyOriginal">
            <summary>
            Gets or sets the body.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyDestination">
            <summary>
            Gets or sets the body destination (SameAsSource, String or Bytes).
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.Body">
            <summary>
            Gets or sets the body as a string.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyAsBytes">
            <summary>
            Gets or sets the body as bytes.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyAsFile">
            <summary>
            Gets or sets the body as a file.
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyAsFileIsCached">
            <summary>
            Is the body as file cached?
            </summary>
        </member>
        <member name="P:WireMock.ResponseMessage.BodyEncoding">
            <summary>
            Gets or sets the body encoding.
            </summary>
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String)">
            <summary>
            Adds the header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WireMock.ResponseMessage.AddHeader(System.String,System.String[])">
            <summary>
            Adds the header.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The values.</param>
        </member>
        <member name="T:WireMock.Server.FluentMockServer">
            <summary>
            The fluent mock server.
            </summary>
            <summary>
            The fluent mock server.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.ReadStaticMappings(System.String)">
            <summary>
            Reads the static mappings from a folder.
            </summary>
            <param name="folder">The optional folder. If not defined, use \__admin\mappings\</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.ReadStaticMapping(System.String)">
            <summary>
            Reads the static mapping.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="P:WireMock.Server.FluentMockServer.Ports">
            <summary>
            Gets the ports.
            </summary>
            <value>
            The ports.
            </value>
        </member>
        <member name="P:WireMock.Server.FluentMockServer.Urls">
            <summary>
            Gets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Server.FluentMockServer.Mappings">
            <summary>
            Gets the mappings.
            </summary>
        </member>
        <member name="P:WireMock.Server.FluentMockServer.Scenarios">
            <summary>
            Gets the scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Start(WireMock.Settings.FluentMockServerSettings)">
            <summary>
            Starts the specified settings.
            </summary>
            <param name="settings">The FluentMockServerSettings.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Start(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Start this FluentMockServer.
            </summary>
            <param name="port">The port.</param>
            <param name="ssl">The SSL support.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Start(System.String[])">
            <summary>
            Start this FluentMockServer.
            </summary>
            <param name="urls">The urls to listen on.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.StartWithAdminInterface(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Start this FluentMockServer with the admin interface.
            </summary>
            <param name="port">The port.</param>
            <param name="ssl">The SSL support.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.StartWithAdminInterface(System.String[])">
            <summary>
            Start this FluentMockServer with the admin interface.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.StartWithAdminInterfaceAndReadStaticMappings(System.String[])">
            <summary>
            Start this FluentMockServer with the admin interface and read static mappings.
            </summary>
            <param name="urls">The urls.</param>
            <returns>The <see cref="T:WireMock.Server.FluentMockServer"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Stop">
            <summary>
            Stop this server.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.AddCatchAllMapping">
            <summary>
            Adds the catch all mapping.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Reset">
            <summary>
            Resets LogEntries and Mappings.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.ResetMappings">
            <summary>
            Resets the Mappings.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.DeleteMapping(System.Guid)">
            <summary>
            Deletes the mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.AddGlobalProcessingDelay(System.TimeSpan)">
            <summary>
            The add request processing delay.
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.AllowPartialMapping">
            <summary>
            Allows the partial mapping.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.SetBasicAuthentication(System.String,System.String)">
            <summary>
            Sets the basic authentication.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.RemoveBasicAuthentication">
            <summary>
            Removes the basic authentication.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.SetMaxRequestLogCount(System.Nullable{System.Int32})">
            <summary>
            Sets the maximum RequestLog count.
            </summary>
            <param name="maxRequestLogCount">The maximum RequestLog count.</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.SetRequestLogExpirationDuration(System.Nullable{System.Int32})">
            <summary>
            Sets RequestLog expiration in hours.
            </summary>
            <param name="requestLogExpirationDuration">The RequestLog expiration in hours.</param>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.ResetScenarios">
            <summary>
            Resets the Scenarios.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.Given(WireMock.Matchers.Request.IRequestMatcher)">
            <summary>
            The given.
            </summary>
            <param name="requestMatcher">The request matcher.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="E:WireMock.Server.FluentMockServer.LogEntriesChanged">
            <summary>
            Log entries notification handler
            </summary>
        </member>
        <member name="P:WireMock.Server.FluentMockServer.LogEntries">
            <summary>
            Gets the request logs.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.FindLogEntries(WireMock.Matchers.Request.IRequestMatcher[])">
            <summary>
            The search log-entries based on matchers.
            </summary>
            <param name="matchers">The matchers.</param>
            <returns>The <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.ResetLogEntries">
            <summary>
            Resets the LogEntries.
            </summary>
        </member>
        <member name="M:WireMock.Server.FluentMockServer.DeleteLogEntry(System.Guid)">
            <summary>
            Deletes the mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="T:WireMock.Server.IRespondWithAProvider">
            <summary>
            IRespondWithAProvider
            </summary>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.Guid)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithTitle(System.String)">
            <summary>
            Define a unique title for this mapping.
            </summary>
            <param name="title">The unique title.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WithGuid(System.String)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.AtPriority(System.Int32)">
            <summary>
            Define the priority for this mapping.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.RespondWith(WireMock.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.InScenario(System.String)">
            <summary>
            Sets the the scenario.
            </summary>
            <param name="scenario">The scenario.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WhenStateIs(System.Object)">
            <summary>
            Execute this respond only in case the current state is equal to specified one.
            </summary>
            <param name="state">Any object which identifies the current state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.IRespondWithAProvider.WillSetStateTo(System.Object)">
            <summary>
            Once this mapping is executed the state will be changed to specified one.
            </summary>
            <param name="state">Any object which identifies the new state</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="T:WireMock.Server.RespondWithAProvider">
            <summary>
            The respond with a provider.
            </summary>
        </member>
        <member name="F:WireMock.Server.RespondWithAProvider._registrationCallback">
            <summary>
            The _registration callback.
            </summary>
        </member>
        <member name="F:WireMock.Server.RespondWithAProvider._requestMatcher">
            <summary>
            The _request matcher.
            </summary>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.#ctor(WireMock.RegistrationCallback,WireMock.Matchers.Request.IRequestMatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Server.RespondWithAProvider"/> class.
            </summary>
            <param name="registrationCallback">The registration callback.</param>
            <param name="requestMatcher">The request matcher.</param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.RespondWith(WireMock.IResponseProvider)">
            <summary>
            The respond with.
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.String)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithGuid(System.Guid)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="guid">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.WithTitle(System.String)">
            <summary>
            Define a unique identifier for this mapping.
            </summary>
            <param name="title">The unique identifier.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="M:WireMock.Server.RespondWithAProvider.AtPriority(System.Int32)">
            <summary>
            Define the priority for this mapping.
            </summary>
            <param name="priority">The priority.</param>
            <returns>The <see cref="T:WireMock.Server.IRespondWithAProvider"/>.</returns>
        </member>
        <member name="T:WireMock.Settings.FluentMockServerSettings">
            <summary>
            FluentMockServerSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.Port">
            <summary>
            Gets or sets the port.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.UseSSL">
            <summary>
            Gets or sets the use SSL.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.StartAdminInterface">
            <summary>
            Gets or sets wether to start admin interface.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.ReadStaticMappings">
            <summary>
            Gets or sets if the static mappings should be read at startup.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.ProxyAndRecordSettings">
            <summary>
            Gets or sets if the server should record and save requests and responses.
            </summary>
            <value>true/false</value>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.Urls">
            <summary>
            Gets or sets the urls.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.StartTimeout">
            <summary>
            StartTimeout
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.AllowPartialMapping">
            <summary>
            Allow Partial Mapping (default set to false).
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.AdminUsername">
            <summary>
            The username needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.AdminPassword">
            <summary>
            The password needed for __admin access.
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.RequestLogExpirationDuration">
            <summary>
            The RequestLog expiration in hours (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.MaxRequestLogCount">
            <summary>
            The MaxRequestLog count (optional).
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.PreWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) before the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="P:WireMock.Settings.FluentMockServerSettings.PostWireMockMiddlewareInit">
            <summary>
            Action which is called (with the IAppBuilder or IApplicationBuilder) after the internal WireMockMiddleware is initialized. [Optional]
            </summary>
        </member>
        <member name="T:WireMock.Settings.ProxyAndRecordSettings">
            <summary>
            RecordAndSaveSettings
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.Url">
            <summary>
            The URL to proxy.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMapping">
            <summary>
            Save the mapping for each request/response to the internal Mappings.
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.SaveMappingToFile">
            <summary>
            Save the mapping for each request/response to also file. (Note that SaveMapping must also be set to true.)
            </summary>
        </member>
        <member name="P:WireMock.Settings.ProxyAndRecordSettings.X509Certificate2ThumbprintOrSubjectName">
            <summary>
            The clientCertificate thumbprint or subject name fragment to use. Example thumbprint : "D2DBF135A8D06ACCD0E1FAD9BFB28678DF7A9818". Example subject name: "www.google.com""
            </summary>
        </member>
        <member name="T:WireMock.Util.ConcurentObservableCollection`1">
            <summary>
            A special Collection that overrides methods of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to make them thread safe
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <inheritdoc cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurentObservableCollection`1" /> class. 
            </summary> 
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurentObservableCollection`1"/> class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.ConcurentObservableCollection`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.ClearItems">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems"/>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.RemoveItem(System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="M:WireMock.Util.ConcurentObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)"/>
        </member>
        <member name="T:WireMock.Util.DictionaryExtensions">
            <summary>
            Some IDictionary Extensions
            </summary>
        </member>
        <member name="M:WireMock.Util.DictionaryExtensions.Loop``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Loops the dictionary and executes the specified action.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to loop (can be null).</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:WireMock.Util.NamedReaderWriterLocker">
            <summary>
            http://johnculviner.com/achieving-named-lock-locker-functionality-in-c-4-0/
            </summary>
        </member>
        <member name="T:WireMock.Util.WireMockList`1">
            <summary>
            A special List which overrides the ToString() to return first value.
            </summary>
            <typeparam name="T">The generic type</typeparam>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:WireMock.Util.WireMockList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.WireMockList`1"/> class.
            </summary>
        </member>
        <member name="M:WireMock.Util.WireMockList`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.WireMockList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:WireMock.Util.WireMockList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:WireMock.Util.WireMockList`1"/> class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:WireMock.Util.WireMockList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
        </member>
        <member name="M:WireMock.Validation.CoreStrings.ArgumentPropertyNull(System.String,System.String)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="M:WireMock.Validation.CoreStrings.ArgumentIsEmpty(System.String)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:WireMock.Validation.CoreStrings.InvalidEntityType(System.Type,System.String)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:WireMock.Validation.CoreStrings.CollectionArgumentIsEmpty(System.String)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
    </members>
</doc>
